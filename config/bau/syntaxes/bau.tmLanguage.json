{
    "name": "Bau",
    "scopeName": "source.bau",
    "fileTypes": [
        "bau"
    ],
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#operator"
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f_]+",
			"name": "constant.numeric.integer.hexadecimal.bau"
		},
		{
			"match": "(?<![\\w\\d.])[0-9_]+\\.[0-9_]+([eE]-?[0-9]*)?",
			"name": "constant.numeric.float.bau"
		},
		{
			"match": "(?<![\\w\\d.])[0-9_]+(?![eE.0-9])",
			"name": "constant.numeric.integer.bau"
		},
		{
			"include": "#string"
		},
		{
			"match": "\\b(if|elif|else|for|while|break|return|throw|catch)\\b",
			"name": "keyword.control.flow.bau"
		},		
		{
			"match": "\\b(type|fun|import|module|const|throws)\\b",
			"name": "keyword.other.bau"
		},
		{
			"match": "\\b(int|i32|i16|i8|f64|f32)\\b",
			"name": "support.type.bau"
		},
		{
			"match": "\\b(null)\\b",
			"name": "constant.language.bau"
		},
		{
			"match": "\\b(this)\\b",
			"name": "variable.language.self.bau"
		},
		{
			"match": "\\b(and|or|not)\\b",
			"name": "keyword.operator.bau"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.any-method.bau"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*=\\s*\\b(function)\\b)",
			"name": "variable.other.bau"
		}
	],
	"repository": {
		"escaped_char": {
			"patterns": [
				{
					"match": "\\\\[nt\\\\'\\n]",
					"name": "constant.character.escape.bau"
				},
				{
					"match": "\\\\z[\\n\\t ]*",
					"name": "constant.character.escape.bau"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.bau"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.bau"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.bau"
						}
					},
					"end": "'[ \\t]*|(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.bau"
						}
					},
					"name": "string.quoted.single.bau",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "``",
					"beginCaptures": {
						"0": {
							"name": "string.multiline.bau"
						}
					},
					"end": "``"
				},
				{
					"begin": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.bau"
						}
					},
					"end": "`[ \\t]*|(?=\\n)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.bau"
						}
					},
					"name": "string.quoted.double.bau"
				}	
			]
		},
		"comment": {
			"patterns": [
				{
					"begin": "##",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.bau"
						}
					},
					"end": "##",
					"name": "comment.block.bau"
				},
				{
					"begin": "#",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.bau"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-slash.bau"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.bau"
				},
				{
					"match": "\\^=|<<=|>>=|&=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.bau"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.bau"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.bau"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.bau"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.bau"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.bau"
				}
			]
		}
	}
}