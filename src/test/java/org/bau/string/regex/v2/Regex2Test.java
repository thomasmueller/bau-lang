package org.bau.string.regex.v2;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.regex.Pattern;

import org.junit.Test;

public class Regex2Test {

    @Test
    public void testRegexQuotes() {
        assertEquals("\\Q'\\E", Pattern.quote("'"));
        assertEquals("\\Q\\Q\\E", Pattern.quote("\\Q"));
        assertEquals("\\Q\\E\\\\E\\Q\\E", Pattern.quote("\\E"));
        assertEquals("\\Q\\Q\\E\\\\E\\Q\\E", Pattern.quote("\\Q\\E"));
    }

    @Test
    public void test() {
        assertTrue("-123".matches("^[-\\+]?\\d+$"));
        assertTrue("+123".matches("^[-\\+]?\\d+$"));
        assertTrue("123".matches("^[-\\+]?\\d+$"));
        assertFalse("*123".matches("^[-\\+]?\\d+$"));
    }

    @Test
    public void toRegex() {
        assertEquals("[ \\t\\xA0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]",
                toRegex("[' 'txA0u1680u180eu2000-u200au202fu205fu3000]"));
        assertEquals("\\b\\B\\A\\G\\Z\\z\\p\\P\\W\\u1234", toRegex("bBAGZzpPWu1234"));
        assertEquals("[^\\x00-\\x7F]", toRegex("[^x00-x7F]"));
        assertEquals("^[a-z0-9_-]{3,16}$", toRegex("^['a-z0-9_-']{3,16}$"));
        assertEquals("^\\d*(\\.\\d+)?$", toRegex("^d*('.'d+)?$"));
        assertEquals("\\+=|-=|\\*=|\\/=", toRegex("'+='|'-='|'*='|'/='"));
        assertEquals("^[-\\+]?\\d+$", toRegex("^['-+']?d+$"));
        assertEquals("0x[0-9a-f]*", toRegex("'0x'['0-9a-f']*"));
    }


    @Test
    public void toRegex2() {
        assertEquals("[' 'txA0u1680u180eu2000-u200au202fu205fu3000]",
                toRegex2("[ \\t\\xA0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]"));
        assertEquals("p{IsLatin}", toRegex2("\\p{IsLatin}"));
        assertEquals("bBAGZzpPWu1234", toRegex2("\\b\\B\\A\\G\\Z\\z\\p\\P\\W\\u1234"));
        assertEquals("[^x00-x7F]", toRegex2("[^\\x00-\\x7F]"));
        assertEquals("[^x00-x7F]", toRegex2("[^\\x00-\\x7F]"));
        assertEquals("^['a-z0-9_-']{3,16}$", toRegex2("^[a-z0-9_-]{3,16}$"));
        assertEquals("'hello'", toRegex2("hello"));
        assertEquals("'joe''s taxi'", toRegex2("joe's taxi"));
        assertEquals("^d*('.'d+)?$", toRegex2("^\\d*(\\.\\d+)?$"));
        assertEquals("'+='|'-='|'*='|'/='", toRegex2("\\+=|-=|\\*=|/="));
        assertEquals("^['-+']?d+$", toRegex2("^[-+]?\\d+$"));
        assertEquals("'0x'['0-9a-f']*", toRegex2("0x[0-9a-f]*"));
    }

    @Test
    public void sizeComparison() {
        int shorter = 0;
        int same = 0;
        String[] list = new String[] {
                "^\\d+$",
                "^[a-zA-Z0-9]*$",
                "^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*$",
                "^\\d*\\.\\d+$",
                "^\\d*(\\.\\d+)?$",
                "^-?\\d*(\\.\\d+)?$",
                "[-]?[0-9]+[,.]?[0-9]*([\\/][0-9]+[,.]?[0-9]*)*",
                "^[a-zA-Z0-9 ]*",
                "^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*",
                "^([a-z0-9_\\.\\+-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$",
                "(?=(.*[0-9]))(?=.*[\\!@#$%^&*()\\\\[\\]{}\\-_+=~`|:;\"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}",
                "(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$",
                "^[a-z0-9_-]{3,16}$",
                "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#()?&//=]*)",
                "(https?:\\/\\/)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)",
                "/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))",
                "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
                "([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))",
                "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$",
                "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)(?:0?2|(?:Feb))\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$",

                // begin ('0'? [1-9]) or ('1'[1-2]) ':' [0-5][0-9] end
                "^(0?[1-9]|1[0-2]):[0-5][0-9]$",
                "((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))",
                "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                "(?:[01]\\d|2[0123]):(?:[012345]\\d):(?:[012345]\\d)",
                "<\\/?[\\w\\s]*>|<.+[\\W]>",
                "^-\\d+$",
                "^-?\\d+$",
                "^\\d*\\.?\\d+$",
                "^-\\d*\\.?\\d+$",
                "^-?\\d*\\.?\\d+$",
                "^\\+?[\\d\\s]{3,}$",
                "^\\+?[\\d\\s]+\\(?[\\d\\s]{10,}$",
                "^(19|20)\\d{2}$",
                "^([1-9]|0[1-9]|[12][0-9]|3[01])\\D([1-9]|0[1-9]|1[012])\\D(19[0-9][0-9]|20[0-9][0-9])$",
                "^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]){3}$",
                "^[\\w.']{2,}(\\s[\\w.']{2,})+$",
                "^[\\w\\d_.]{4,}$",
                "^.{6,}$",
                "^.{6,}$|^$",
                "^[_]*([a-z0-9]+(\\.|_*)?)+@([a-z][a-z0-9-]+(\\.|-*\\.))+[a-z]{2,6}$",
                "^([a-z][a-z0-9-]+(\\.|-*\\.))+[a-z]{2,6}$",
                "^http\\:\\/\\/[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$",
                "[\\r\\n]|$",
                "^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,63})$",
                "^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$",
                "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
                "^<([a-z\\d]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s*\\/>)$",
                "^([1-2][0-9]|3[0-1]|0?[1-9])([-\\.\\/ ])(1[0-2]|0?[1-9])(\\2)([\\d]{4}|[\\d]{2})$",
                "<(?>/?)(?!p).+?>",
                "^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6})*",
                "^(https?:\\/\\/)?([a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5})(:[0-9]{1,5})?(\\/.*)?$",
                "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$",
                "^(1[0-2]|0?[1-9]):[0-5][0-9] (AM|PM)$",
                "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]) (0[0-9]|1[0-9]|2[1-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9]))$",
                "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
                "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
                "^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$",
                "^((\\/|\\\\|\\/\\/|https?:\\\\\\\\|https?:\\/\\/)[a-z0-9_@\\-^!#$%&+={}.\\/\\\\\\[\\]]+)+\\.[a-z]+$",
                "^[\\w,\\s-]+\\.[A-Za-z]{3}$",
                "^[\\w,\\s-]+\\.(jpg|jpeg|png|gif|pdf)$",
                "^(?=(.*[0-9]))(?=.*[\\!@#$%^&*()\\\\[\\]{}\\-_+=~`|:;\"'<>,.\\/?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}$",
                "^(?=(.*[0-9]))((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.{8,}$",
                "^[a-z0-9]+(?:-[a-z0-9]+)*$",
                "\\s+$",
                "[^\\x00-\\x7F]",
                "\\b\\s{2,}",
                "^(\\s\\s)*\\s[^\\s]",
                "(?<=^(\\s\\s)*)\\s(?=[^\\s])",
                "(\\(\\s|\\s\\))",
                "(?<=\\()\\s",
                "\\b\\w*myname\\b", };
        for (String regex : list) {
            String r2 = escapeJava(toRegex2(regex));
            String regexEscaped = escapeJava(regex);
            if (r2.length() < regexEscaped.length()) {
                shorter++;
                // System.out.println(regexEscaped + "   ==>   " + r2 + " for " + regex);
            } else if (r2.length() == regexEscaped.length()) {
                same++;
            }
            if (!toRegex(toRegex2(regex)).equals(regex)) {
                System.out.println();
                System.out.println("regex1 " + regex);
                System.out.println("regex2 " + toRegex2(regex));
                System.out.println("back   " + toRegex(toRegex2(regex)));
                // System.out.println(regex + "   ==>   " + r2);
            }
        }
        assertEquals(22, shorter);
        assertEquals(11, same);
        assertEquals(40, (list.length - shorter - same));
    }

    public static String escapeJava(String s) {
        StringBuilder buff = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c == '\\') {
                buff.append("\\\\");
            } else if (c == '\"') {
                buff.append("\\\"");
            } else {
                buff.append(c);
            }
        }
        return buff.toString();
    }

    private String toRegex(String regex2) {
        return Regex2.toRegex(regex2);
    }

    private String toRegex2(String regex) {
        return Regex2.toRegex2(regex);
    }

}
