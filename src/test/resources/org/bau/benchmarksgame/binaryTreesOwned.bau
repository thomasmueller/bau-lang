import org.bau.Utils
import org.bau.Math
import org.bau.Env

fun main()
    minDepth : 4
    maxDepth := 10
    if Env.argCount() > 1
        maxDepth = Math.parseInt(Env.arg(1))
    stretchDepth : maxDepth + 1
    stretch Tree+? := with(stretchDepth)
    println('ownership / borrowing')
    println('stretch tree of depth ' stretchDepth '\t check: ' stretch.nodeCount())
    stretch = with(0)
    longLived := with(maxDepth)
    depth := minDepth
    while depth <= maxDepth
        iterations := 1 << (maxDepth - depth + minDepth)
        check := 0;
        i := 1
        while i <= iterations
            t := with(depth)
            check += t.nodeCount()
            i += 1
        println(iterations '\t trees of depth ' depth '\t check: ' check)
        depth += 2
    println('long lived tree of depth ' maxDepth '\t check: ' longLived.nodeCount())

type Tree
    left Tree+?
    right Tree+?

fun Tree+ nodeCount() int
    result := 1
    l : &left
    if l
        result += l.nodeCount()
    r : &right
    if r
        result += r.nodeCount()
    return result

fun stretch(depth int)
    c := count(depth)
    println('stretch tree of depth ' depth '; check: ' c)

fun count(depth int) int
    t := with(depth)
    c := t.nodeCount()
    return c

fun with(depth int) Tree+
    if depth = 0
        return Tree+(null, null)
    return Tree+(with(depth - 1), with(depth - 1))

## Expected
ownership / borrowing
stretch tree of depth 4  check: 31
8    trees of depth 1    check: 24
2    trees of depth 3    check: 30
long lived tree of depth 3   check: 15
