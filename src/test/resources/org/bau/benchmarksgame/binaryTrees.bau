import org.bau.Utils

# treeCount := 0

fun main()
    # stretch(20)
    for i := until(10)
        start : Utils.getNanoTime()
        stretch(20)
        time : (Utils.getNanoTime() - start) / 1000000
        println('millis: ', time)

type Tree
    left Tree?
    right Tree?

fun Tree nodeCount() int
    result := 1
    # not-null conditions can only be on variable currently
    # (it is safer: fields values could change)
    l := left
    if l
        result += l.nodeCount()
    r := right
    if r
        result += r.nodeCount()
    return result

fun stretch(depth int)
    c := count(depth)
    println('stretch tree of depth ' depth '; check: ' c)

fun count(depth int) int
    t := with(depth)
    c := t.nodeCount()
    t.clear()
    return c

fun newTree(left Tree, right Tree) Tree
    t := Tree()
    # treeCount += 1
    t.left = left
    t.right = right
    return t

fun with(depth int) Tree
    if depth = 0
        return newTree(null, null)
    return newTree(with(depth - 1), with(depth - 1))

fun Tree clear()
    if left <> null
        left.clear()
        left = null
        right.clear()
        right = null

## Expected
stretch tree of depth 11; check: 4095
1024 trees of depth 4; check: 31744
256 trees of depth 6; check: 32512
64 trees of depth 8; check: 32704
16 trees of depth 10; check: 32752
long lived tree of depth 10; check: 2047
