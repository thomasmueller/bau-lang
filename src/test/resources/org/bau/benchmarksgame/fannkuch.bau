fun fannkuch(n int) int
    perm1 : new(int[], n)
    for i := until(n)
        perm1[i] = i
    perm : new(int[], n)
    count : new(int[], n)
    f := 0
    flips := 0
    nperm := 0
    checksum := 0
    k := 0
    r := n
    while r > 0
        while r > 1 
            count[r-1] = r
            r -= 1
        for i := until(n)
            perm[i] = perm1[i]
        # Count flips and update max and checksum
        f = 0
        k = perm[0]
        while k != 0
            for i := until(perm.len)
                break (2*i) >= k
                t := perm[i]
                perm[i] = perm[k-i]
                perm[k-i] = t
            k = perm[0]
            f += 1
        if f > flips
            flips = f
        if (nperm & 0x1) = 0
            checksum += f
        else 
            checksum -= f
        # Use incremental change to generate another permutation
        more := 1
        while more
            if r = n
                println(checksum)
                return flips
            p0 := perm1[0]
            i := 0
            while i < r
                j := i + 1
                perm1[i] = perm1[j]
                i = j
            perm1[r] = p0
            count[r] -= 1
            if count[r] > 0
                more = 0
            else 
                r += 1
        nperm += 1
    return flips

n := 12
println('Pfannkuchen(' n ') is ' fannkuch(n))
##

3968050
Pfannkuchen(12) = 65
(27838 ms)
    
3968050
Pfannkuchen(12) = 65
(26403 ms)

##