import org.bau.BigInt
    newBigInt

fun assert(x int) macro
    if not x
        println('assertion failed: ' x.source)
    # continue
        
fun main()
    # add
    assert(newBigInt(123).
        add(newBigInt(456)).toInt() = 579)
    assert(newBigInt(123).shiftLeft(100).
        add(newBigInt(456).shiftLeft(100)).
        shiftRight(100).toInt() = 579)
    # subtract
    assert(newBigInt(1000).
        sub(newBigInt(250)).toInt() = 750)
    assert(newBigInt(250).
        sub(newBigInt(1000)).toInt() = -750)
    # muliply
    assert(newBigInt(20).
        mul(newBigInt(5)).toInt() = 100)
    assert(newBigInt(20).shiftLeft(100).
        mul(newBigInt(5).shiftLeft(100)).
        shiftRight(200).toInt() = 100)
    # divide
    assert(newBigInt(100).
        div(newBigInt(5)).toInt() = 20)
    assert(newBigInt(100).shiftLeft(100).
        div(newBigInt(5).shiftLeft(100)).toInt() = 20)
    # shift
    assert(newBigInt(1).shiftLeft(3).toInt() = 8)
    assert(newBigInt(16).shiftRight(2).toInt() = 4)
    # negate
    assert(newBigInt(50).neg().toInt() = -50)
    assert(newBigInt(50).neg().neg().toInt() = 50)
    # compare
    assert(newBigInt(10).compare(newBigInt(20)) = -1)
    assert(newBigInt(10).compare(newBigInt(-20)) = 1)
    assert(newBigInt(10).compare(newBigInt(10)) = 0)    
    # signum
    assert(newBigInt(123).signum() = 1)
    assert(newBigInt(0).signum() = 0)
    assert(newBigInt(-123).signum() = -1)
    # len
    assert(newBigInt(1).len() = 1)
    assert(newBigInt(2).len() = 2)
    assert(newBigInt(255).len() = 8)
    assert(newBigInt(256).len() = 9)
    assert(newBigInt(256).shiftLeft(100).len() = 109)
    # toStr
    println(newBigInt(1234).shiftLeft(100).mul(newBigInt(5678).shiftLeft(100)).toStr())

## Expected
11259255661683342732106639778226391631287398650794192985050056753152
