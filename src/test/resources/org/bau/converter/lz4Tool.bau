import org.bau.Env
import org.bau.compress.Lz4
    XXHash
    BLOCK_SIZE
    newXXHash
import org.bau.File
    readFully

fun main() int
    args : Env.argCount()
    if args < 3
        return 0
    a1 : Env.arg(1)
    a2 : Env.arg(2)
    if args = 4 and is(a1, '-d')
        println('Decompressed ' decompressFile(a2, Env.arg(3)) ' bytes')
    elif args = 3 and is(a1, '-d') and is(a2, '-')
        println('decompress stream is not yet implemented')
    elif args >= 3 and is(a1, '-1')
        if args = 4
            println('compress ' a2 ' to ' Env.arg(3))
        elif args = 3 and is(a2, '-')
            println('compress stream is not yet implemented')
    elif args = 3 and is(a1, '-h')
        if is(a2, '-')
            println('hash stream is not yet implemented')
        else
            x : xxhashFile(a2)
            println(hex(x, 8))

fun hex(x int, len int) i8[]
    l := len
    if l < 0
        l = 0
    elif l > 8
        l = 8
    data : new(i8[], l)
    y := x
    i := l - 1
    while i >= 0
        c := ord('0') + (y & 0xf)
        if (y & 0xf) > 9
            c = ord('a') + (y & 0xf) - 10
        data[i] = c
        y >>= 4
        i -= 1
    return data

fun xxhashFile(inputFileName i8[]) int
    in : File.openFile(inputFileName, 'r')
    hash : newXXHash(0)
    buffer : new(i8[], Lz4.BLOCK_SIZE)
    result := 0
    while 1
        read : in.readFully(buffer, 0, buffer.len)
        if read <= 0
            return result
        result = hash.update(buffer, 0, read)

fun is(a i8[], b i8[]) int
    if a.len <> b.len
        return 0
    for i := until(a.len)
        if a[i] <> b[i]
            return 0
    return 1

fun decompressFile(inputFileName i8[], outputFileName i8[]) int
    in : File.openFile(inputFileName, 'r')
    out : File.openFile(outputFileName, 'w')
    header : new(i8[], 7)
    # todo readExact
    in.readFully(header, 0, 7)
    magic : Lz4.read4(header, 0);
    if magic <> 0x184d2204
        return -1
    flags : header[4]
    version : flags >> 6
    if version <> 1
        return -1
    blockIndependanceFlag : (flags >> 5) & 1
    if blockIndependanceFlag = 0
        return -1
    blockChecksumFlag : (flags >> 4) & 1
    if blockChecksumFlag
        return -1
    contentSizeFlag : (flags >> 3) & 1;
    if contentSizeFlag
        return -1
    contentChecksumFlag : (flags >> 2) & 1
    # currently, the content checksum flag is ignored
    if (flags >> 1) & 1
        return -1
    if flags & 1
        return -1
    bd : header[5]
    blockMaxSize : (bd >> 4) & 0x7
    if blockMaxSize < 4 or blockMaxSize > 7
        return -1
    headerChecksum : header[6] & 0xff
    hash : newXXHash(0)
    xxhash : (hash.update(header, 4, 2) >> 8) & 0xff
    if (xxhash & 0xff) <> headerChecksum
        return -1
    block : new(i8[], 4 * 1024 * 1024)
    outBlock : new(i8[], 4 * 1024 * 1024)
    outputFileSize := 0
    while 1
        # readExact
        in.readFully(header, 0, 4)
        blockSize : Lz4.read4(header, 0)
        break blockSize = 0
        uncompressed : (blockSize >> 31) & 1
        blockSize &= 0x7fffffff
        if blockSize > 4 * 1024 * 1024
            return -1
        # readExact
        in.readFully(block, 0, blockSize)
        if uncompressed
            out.write(block, 0, blockSize)
            outputFileSize += blockSize
        else
            size : Lz4.decompressBlock(block, blockSize, outBlock, 0)
            out.write(outBlock, 0, size)
            outputFileSize += size
    return outputFileSize

