# module org.bau.HashMap

type HashMap(K, V)
    size int
    keys K[]
    values V[]
    hashes int[]

fun newHashMap(K type, V type) HashMap(K, V)
    result : HashMap(K, V)(K[4], V[4], int[4])
    return result

fun HashMap(K, V) put(key K, value V)
    if size * 2 >= keys.len
        kn : K[keys.len * 2]
        vn : V[keys.len * 2]
        hn : int[keys.len * 2]
        ok : keys
        oh : hashes
        ov : values
        keys = kn
        values = vn
        hashes = hn
        for i:= until(ok.len)
            if oh[i] <> 0
                this.put(ok[i], ov[i])
    hash : key.hashCode()
    p := hash & (keys.len - 1)
    while 1
        if hashes[p] = hash and key.equals(keys[p])
            values[p] = value
            return
        elif hashes[p] = 0
            size += 1
            keys[p] = key
            hashes[p] = hash
            values[p] = value
            return
        p = (p + 1) & (keys.len - 1)

fun HashMap(K, V) get(key K) V
    hash : key.hashCode()
    p := hash & (keys.len - 1)
    while 1
        if hashes[p] = 0
            return values[p]
        elif hashes[p] = hash and key.equals(keys[p])
            return values[p]
        p = (p + 1) & (keys.len - 1)

fun HashMap(K, V) remove(key K) int
    hash : key.hashCode()
    p := hash & (keys.len - 1)
    while 1
        if hashes[p] = 0
            # not found
            return 0
        elif hashes[p] = hash and key.equals(keys[p])
            keys[p] = null
            hashes[p] = 0
            values[p] = null
            size -= 1
            break
        p = (p + 1) & (keys.len - 1)
    p2 := (p + 1) & (keys.len - 1)
    while 1
        h2 := hashes[p2]
        break h2 = 0
        pb := h2 & (keys.len - 1)
        canMove := 0
        if pb <= p2
            # normal case (no wrap)
            # pb.....p2
            canMove = (pb <= p) and (p2 >= p)
        else
            # wrapped around
            # ....p2       pb.....
            canMove = pb <= p or p2 > p
        if canMove
            keys[p] = keys[p2]
            hashes[p] = hashes[p2]
            values[p] = values[p2]
            keys[p2] = null
            hashes[p2] = 0
            values[p2] = null
            p = p2
        p2 = (p2 + 1) & (keys.len - 1)
    return 1

# calculate the hash of a byte array
# 4 bytes at a time if possible
fun hashCode(data i8[]) int
    if data.len <= 0
        return 0
    h := data.len << 32
    i := 0..data.len
    if i < data.len - 3
        while 1
            x := (data[i]! & 0xff) |
                 ((data[i + 1]! & 0xff) << 8) |
                 ((data[i + 2]! & 0xff) << 16) |
                 ((data[i + 3]! & 0xff) << 24)
            h = (h + x) * 0x9e3779b185ebca87
            n : i + 4
            break n >= data.len - 3
            i = n
    if i < data.len and i <> data.len - 4
        x := 0
        s := 0
        while 1
            x ^= (data[i]! & 0xff) << s
            s += 8
            n : i + 1
            break n >= data.len
            i = n
        h = (h + x) * 0x9e3779b185ebca87
    return h ^ (h >> 32)

fun mix(z int) int
    z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9
    z = (z ^ (z >> 27)) * 0x94d049bb133111eb
    return z ^ (z >> 31)

fun int hashCode() int
    return mix(this)

fun i8[] hashCode() int
    return hashCode(this)

type str 
    value i8[]
  
fun int equals(other int) int
    return this = other

fun str equals(other str) int
    return this.value.len = other.value.len

fun str hashCode() int
    return hashCode(this.value)

fun test()
    println('hash of hello: ' hashCode('hello'))
    map := newHashMap(int, int)
    for i := until(20)
        map.put(i, 10 * i)
        if i > 10
            map.remove(i - 10)
        println('int map[' i ']=' map.get(i))
    map2 := newHashMap(str, str)
    a : str('h')
    b : str('hello')
    map2.put(a, b)
    c : map2.get(a)
    println('str map[' a.value ']=' c.value)

test()

## Expected
hash of hello: -4214531659405503735
int map[0]=0
int map[1]=10
int map[2]=20
int map[3]=30
int map[4]=40
int map[5]=50
int map[6]=60
int map[7]=70
int map[8]=80
int map[9]=90
int map[10]=100
int map[11]=110
int map[12]=120
int map[13]=130
int map[14]=140
int map[15]=150
int map[16]=160
int map[17]=170
int map[18]=180
int map[19]=190
str map[h]=hello
