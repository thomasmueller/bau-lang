import org.bau.List
    List
    newList
import org.bau.Exception
    exception

enum tokenType
    START
    END
    MATCH
    LIST
    NOT_LIST
    ANY

type Token
    type tokenType
    data List(i8)
    min int
    max int

fun Token matchChar(text i8[], pos int) int throws exception
    if pos >= text.len
        return 0
    c := text[pos]
    switch type
    case tokenType.START, tokenType.END
        throw exception('Start or end in wrong location')
    case tokenType.MATCH
        return c = data.array[0]
    case tokenType.LIST
        for i := range(0, data.size)
            min : data.array[i]
            max : data.array[i + 1]
            if c >= min and c <= max
                return 1
            i += 1
        return 0
    case tokenType.NOT_LIST
        for i := range(0, data.size)
            min : data.array[i]
            max : data.array[i + 1]
            if c >= min and c <= max
                return 0
            i += 1
        return 1
    case tokenType.ANY
        return 1
    else
        throw exception('Unknown token type')

type match
    start int
    end int

fun match(start int, end int) match
    m := new(match)
    m.start = start
    m.end = end
    return m

fun parse(regex i8[]) List(Token) throws exception
    result := newList(Token)
    i := 0
    while i < regex.len
        c := regex[i]
        t := new(Token)
        t.data = newList(i8)
        t.min = 1
        t.max = 1
        if c = ord('^')
            t.type = tokenType.START
            result.add(t)
            i += 1
            continue
        if c = ord('$')
            t.type = tokenType.END
            result.add(t)
            i += 1
            continue;
        if c = ord('.')
            t.type = tokenType.ANY
        elif c = ord('\\')
            t.type = tokenType.MATCH
            i += 1
            t.data.add(regex[i])
        elif c = ord('[')
            i += 1
            c = regex[i]
            if c = ord('^')
                t.type = tokenType.NOT_LIST
                i += 1
                c = regex[i]
            else
                t.type = tokenType.LIST
            t.data.add(c)
            t.data.add(c)
            while 1
                i += 1
                c = regex[i]
                break c = ord(']')
                if c = ord('-')
                    i += 1
                    c = regex[i]
                    t.data.array[t.data.size - 1] = c
                else 
                    t.data.add(c)
                    t.data.add(c)
        else
            t.type = tokenType.MATCH
            t.data.add(c)
        result.add(t)
        break i + 1 >= regex.len
        i += 1
        c = regex[i];
        if c = ord('+')
            t.max = 9999
        elif c = ord('*')
            t.min = 0
            t.max = 9999
        elif c = ord('?')
            t.min = 0
            t.max = 1
        elif c = ord('{')
            i += 1
            start := i
            value := 0
            while i < regex.len
                c = regex[i]
                break c < ord('0') or c > ord('9')
                value = value * 10 + c - ord('0')
                break value > 9999
                i += 1
            t.min = value
            t.max = t.min
            if c = ord(',')
                i += 1
                start = i
                value = 0
                while i < regex.len
                    c = regex[i]
                    break c < ord('0') or c > ord('9')
                    value = value * 10 + c - ord('0')
                    break value > 9999
                    i += 1
                t.max = value
            if c <> ord('}')
                throw exception('Expected }')
        else
            i -= 1
        i += 1
    return result;

fun matchStar(t Token, list List(Token), rp int, text i8[], tp int, max int) int throws exception
    result := -1
    while 1
        end := matchHere(list, rp, text, tp)
        if end >= 0
            result = end
        r := t.matchChar(text, tp)
        tp += 1
        break r = 0
        break max <= 0
        max -= 1
    return result

fun matchHere(list List(Token), rp int, text i8[], tp int) int throws exception
    if rp >= list.size
        return tp
    t := list.array[rp]
    if t.type = tokenType.END
        if tp = text.len
            return tp
        return -1
    for i := until(t.min)
        if not t.matchChar(text, tp)
            return -1
        tp += 1
    return matchStar(t, list, rp + 1, text, tp, t.max - t.min)

fun find(text i8[], regex i8[]) match throws exception
    list := parse(regex)
    if list.size > 0 and list.array[0].type = tokenType.START
        end := matchHere(list, 1, text, 0)
        if end >= 0
            return match(0, end)
        return match(-1, -1)
    tp := 0
    while 1
        end := matchHere(list, 0, text, tp)
        if end >= 0
            return match(tp, end)
        break tp < text.len
        tp += 1
    return match(-1, -1)

fun matches(text i8[], regex i8[]) int throws exception
    result : find(text, regex)
    return result.start = 0 and result.end = text.len

fun test()
    println(matches('hello', 'hell.*'))
    println(matches('hello world', 'hell[o-z] world'))
    catch e
        println('exception ' e.message)

test()

## Expected
1
1
