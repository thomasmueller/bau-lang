fun main()
    # or just: stretch(4); creates 31 trees
    n : 10
    minDepth : 4
    maxDepth : n
    stretchDepth : maxDepth + 1
    stretch(stretchDepth)
    longLivedTree := with(maxDepth)
    depth := minDepth
    while depth <= maxDepth
        iterations := 1 << (maxDepth - depth + minDepth)
        sum := 0
        i := 1
        while i <= iterations
            sum += count(depth)
            i += 1
        println(iterations ' trees of depth ' depth '; check: ' sum)
        depth += 2
    count := longLivedTree.nodeCount()
    println('long lived tree of depth ' maxDepth '; check: ' count)

type Tree
    left Tree?
    right Tree?

fun Tree nodeCount() int
    result := 1
    # not-null conditions can only be on variable currently
    # (it is safer: fields values could change)
    l := left
    if l
        result += l.nodeCount()
    r := right
    if r
        result += r.nodeCount()
    return result

fun stretch(depth int)
    c := count(depth)
    println('stretch tree of depth ' depth '; check: ' c)

fun count(depth int) int
    t := with(depth)
    c := t.nodeCount()
    return c

fun with(depth int) Tree
    if depth = 0
        return Tree(null, null)
    return Tree(with(depth - 1), with(depth - 1))

## Expected
stretch tree of depth 11; check: 4095
1024 trees of depth 4; check: 31744
256 trees of depth 6; check: 32512
64 trees of depth 8; check: 32704
16 trees of depth 10; check: 32752
long lived tree of depth 10; check: 2047
