fun hex(x int, len int) i8[]
  l := len
  if l < 0
    l = 0
  elif l > 16
    l = 16
  data : i8[l]
  y := x
  i := l - 1
  while i >= 0
    c := ord('0') + (y & 0xf)
    if (y & 0xf) > 9
      c = ord('a') + (y & 0xf) - 10
    data[i] = c
    y >>= 4
    i -= 1
  return data

fun rotLefti32(x i32, n i32) i32
    return (x << n) | (x >> (32 - n))


fun hash(data i8[]) int
  h := 1
  if data.len > 0
    i := 0..data.len
    while 1
      h = 31 * h + (data[i!] & 0xff)
      n : i + 1
      break n >= data.len
      i = n
  return h
  
fun hash2(data i8[]) int
  h := 1
  if data.len > 0
    i := 0..data.len
    if i < data.len - 3
      while 1
        n : i + 4
        break n >= data.len
        h = 31 * 31 * 31 * 31 * h + 
          31 * 31 * 31 * (data[i!] & 0xff) + 
          31 * 31 * (data[i + 1!] & 0xff) + 
          31 * (data[i + 2!] & 0xff) + 
          (data[i + 3!] & 0xff)
        i = n
    while 1
      h = 31 * h + (data[i!] & 0xff)
      n : i + 1
      break n >= data.len
      i = n
  return h

fun poly4(data i8[]) int
  if data.len <= 0
    return 0
  h := data.len << 32
  i := 0..data.len
  if i < data.len - 3
    while 1
      x := (data[i!] & 0xff) |
           ((data[i + 1!] & 0xff) << 8) |
           ((data[i + 2!] & 0xff) << 16) |
           ((data[i + 3!] & 0xff) << 24)
      h = (h + x) * 0x9E3779B185EBCA87
      n : i + 4
      break n >= data.len
      i = n
  if i < data.len and i != data.len - 4
    x := 0
    s := 0
    while 1
      x ^= (data[i!] & 0xff) << s
      s += 8
      n : i + 1
      break n >= data.len
      i = n
    h = (h + x) * 0x9E3779B185EBCA87
  return h ^ (h >> 32)

fun poly8(data i8[]) int
  if data.len <= 0
    return 0
  h := int(data.len)
  i := 0..data.len
  if i < data.len - 7
    while 1
      x := (data[i!] & 0xff) |
           ((data[i + 1!] & 0xff) << 8) |
           ((data[i + 2!] & 0xff) << 16) |
           ((data[i + 3!] & 0xff) << 24) |
           ((data[i + 4!] & 0xff) << 32) |
           ((data[i + 5!] & 0xff) << 40) |
           ((data[i + 6!] & 0xff) << 48) |
           ((data[i + 7!] & 0xff) << 56)
      h = (h + x) * 0x9E3779B185EBCA87
      n : i + 8
      break n >= data.len
      i = n
  if i < data.len and i != data.len - 8
    x := 0
    s := 0
    while 1
      x ^= (data[i!] & 0xff) << s
      s += 8
      n : i + 1
      break n >= data.len
      i = n
    h = (h + x) * 0x9E3779B185EBCA87
  h = (h ^ (h >> 32)) * 0x9E3779B185EBCA87
  return h ^ (h >> 32)  

fun murmur3_32(data i8[]) i32
  #Â https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp
  # https://murmurhash.shorelabs.com/
  # MurmurHash3_x86_32
  if data.len <= 0
    return 0
  c1 : i32(0xcc9e2d51)
  c2 : i32(0x1b873593)
  h := i32(0)
  i := 0..data.len
  if i < data.len - 3
    while 1
      x := i32(((data[i!] & 0xff)) |
          ((data[i + 1!] & 0xff) << 8) |
          ((data[i + 2!] & 0xff) << 16) |
          ((data[i + 3!] & 0xff) << 24))
      x *= c1
      x = rotLefti32(x, 15)
      x *= c2
      h ^= x
      h = rotLefti32(h, 13)
      h = h * 5 + 0xe6546b64
      n : i + 4
      break n > data.len - 4
      i = n
  x := i32(0)
  if i < data.len - 4
    i += 4
  if i < data.len and i != data.len - 4
    s := 0
    while 1
      x ^= (data[i!] & 0xff) << s
      n : i + 1
      break n >= data.len
      i = n
      s += 8
    x *= c1
    x = rotLefti32(x, 15)
    x *= c2
    h ^= x
  h ^= data.len
  h ^= h >> 16
  h *= 0x85ebca6b
  h ^= h >> 13
  h *= 0xc2b2ae35
  h ^= h >> 16
  return h

#println(hex(murmur3_32('test'), 8))

import org.bau.Utils

fun testPerf(size int, count int)
    data : i8[size]
    for test := until(1)
      time := Utils.getNanoTime()
      sum := 0
      for i := until(count)
        data[0] = (i + sum) & 0xff
        sum += poly8(data)
      time = Utils.getNanoTime() - time;
      println('size ' size ' count ' count ' ms ' (time / 1_000_000) ' dummy ' sum);

for size := range(1 33)
  testPerf(size, 100_000_000 / size)
