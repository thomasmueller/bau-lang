module org.bau.Utils

# Date and time.
type dateTime
    year i32
    month 0..13
    day 0..32
    hour 0..24
    minute 0..60
    second 0..61
    millis 0..999

# Get the local time in millisecond precision.
fun getDateTime() dateTime
  native(```
    #include <time.h>
    time_t current;
    time(&current);
    struct tm* timeinfo;
    timeinfo = localtime(&current);
    org_bau_Utils_dateTime result;
    result.year = timeinfo->tm_year + 1900;
    result.month = timeinfo->tm_mon + 1;
    result.day = timeinfo->tm_mday;
    result.hour = timeinfo->tm_hour;
    result.minute = timeinfo->tm_min;
    result.second = timeinfo->tm_sec;
    struct timespec time={0,0};
    clock_gettime(CLOCK_REALTIME, &time);
    result.millis = time.tv_nsec / 1000000;
    return result;
    ```)

# Nanosecons since some undefined point in the past. Never jumps backwards.
fun getNanoTime() int
  native(```
    #include <time.h>
    struct timespec time={0,0};
    clock_gettime(CLOCK_MONOTONIC, &time);
    return time.tv_sec * 1000000000ULL + time.tv_nsec;
    ```)

# Nanoseconds since 1970 (epoch). May jump backwards when the system clock is adjusted.
fun getNanoTimeUTC() int
  native(```
    #include <time.h>
    struct timespec time={0,0};
    clock_gettime(CLOCK_REALTIME, &time);
    return time.tv_sec * 1000000000ULL + time.tv_nsec;
    ```)

randomSeed := 0

# Set the random seed.
fun setRandomSeed(seed int)
  randomSeed = seed

# Get the random seed.
fun getRandomSeed() int
  return randomSeed

# Pseudo-random number generated using the Splitmix64 algorithm.
fun random() int
  randomSeed += 0x9e3779b97f4a7c15
  z := randomSeed
  z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9
  z = (z ^ (z >> 27)) * 0x94d049bb133111eb
  return z ^ (z >> 31)
