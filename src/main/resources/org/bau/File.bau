module org.bau.File

type File
    filePointer int

fun openFile(name i8[], mode i8[]) File
    native(```
        // TODO verify strings
        FILE* fp = fopen((char*) name->data, (char*) mode->data);
        org_bau_File_File* f = org_bau_File_File_new();
        f->filePointer = (uint64_t) fp;
        return f;
        ```)
    return File()

fun File seek(pos int)
    native(```
        FILE* fp = (FILE*) (this->filePointer);
        fseek(fp, pos, SEEK_SET);
        ```)

fun File len() int
    native(```
        #include <sys/stat.h>
        FILE* fp = (FILE*) (this->filePointer);
        struct stat st;
        if (fstat(fileno(fp), &st) == -1) {
            return -1;
        }
        return st.st_size;
        ```)
    return -1

fun File read(data i8[], pos int, len int) int
    native(```
        FILE* fp = (FILE*) (this->filePointer);
        if (pos < 0 || len < 0 || pos + len > data->len) {
            return 0;
        } else {
            return fread(data->data + pos, 1, len, fp);
        }
        ```)
    return 0

fun File readFully(buffer i8[], pos int, len int) int
    count := 0
    while
        l := this.read(buffer, count + pos, len - count)
        if l = 0
            return count
        else
            count += l

fun File write(data i8[], pos int, len int) int
    native(```
        FILE* fp = (FILE*) (this->filePointer);
        if (pos < 0 || len < 0 || pos + len > data->len) {
            return -1;
        } else {
            return fwrite(data->data + pos, 1, len, fp);
        }
        ```)
    return 0

fun File close()
    native(```
        FILE* fp = (FILE*) (this->filePointer);
        fclose(fp);
        ```)
 
fun putchar(x i8)
    native(```
    putchar(x & 0xff);
    ```)
